import "oaidl.idl";
import "ocidl.idl";
import "Inspectable.idl";
import "Windows.Foundation.idl";

namespace ReferenceWRLImplementation
{
    [contractversion(1)]
    apicontract ReferenceContract
    {
    }

    interface ISomeOtherType;
    runtimeclass SomeOtherType;

    [uuid(a7bf2f2b-115b-4fbf-9b40-0fb434779668)]
    [contract(ReferenceContract, 1)]
    interface IBasicClass : IInspectable
    {
        HRESULT BasicMethod();
        HRESULT MethodWithBaseTypeParameter([in] UINT32 intParam);
        HRESULT MethodWithStringParameter([in] HSTRING strParam);
        HRESULT MethodWithReferenceTypeParameter([in] ISomeOtherType* refParam);

        HRESULT MethodWithBaseTypeReturnValue([out, retval] UINT32* intRetVal);
        HRESULT MethodWithStringReturnValue([out, retval] HSTRING* strRetVal);
        HRESULT MethodWithReferenceTypeReturnValue([out, retval] ISomeOtherType** refTypeRetVal);

        [propget] HRESULT BaseTypeProperty([out, retval] UINT32* intValue);
        [propput] HRESULT BaseTypeProperty([in] UINT32 intValue);

        [propget] HRESULT StringProperty([out, retval] HSTRING* strValue);
        [propput] HRESULT StringProperty([in] HSTRING strValue);

        [propget] HRESULT RefTypeProperty([out, retval] ISomeOtherType** refValue);
        [propput] HRESULT RefTypeProperty([in] ISomeOtherType* refValue);
    }

    [contract(ReferenceContract, 1)]
    [activatable(ReferenceContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass BasicClass
    {
        [default] interface IBasicClass;
    }
    
    [uuid(5246fb01-553f-4666-8b3a-e82b3078eb38)]
    [contract(ReferenceContract, 1)]
    interface ISomeOtherType : IInspectable
    {
    }

    [contract(ReferenceContract, 1)]
    [activatable(ReferenceContract, 1)]
    [marshaling_behavior(agile)]
    runtimeclass SomeOtherType
    {
        [default] interface ISomeOtherType;
    }

    // Forward-declare ParameterizedConstructorClass to allow specifying out, retval parameters
    // and exclusiveto for activation factory (IParameterizedConstructorClassFactory)
    runtimeclass ParameterizedConstructorClass;

    [uuid(3baa63a9-52d4-4f8d-8640-f1a0a3c7d99c)]
    [contract(ReferenceContract, 1)]
    [exclusiveto(ParameterizedConstructorClass)]
    interface IParameterizedConstructorClassFactory : IInspectable
    {
        HRESULT CreateWithBaseTypeParam([in] UINT32 intValue, [out, retval] ParameterizedConstructorClass** parameterizedConstructorClass);

        // WinRT components cannot have multiple constructor methods with the same number of parameters
        // This is because languages like JavaScript project each as a single parameter constructor
        // and can't differentiate methods by the types of parameters

        HRESULT CreateWithStringParam([in] HSTRING strValue, [in] UINT32 dummyParam1, [out, retval] ParameterizedConstructorClass** parameterizedConstructorClass);

        HRESULT CreateWithRefTypeParam([in] ISomeOtherType* refTypeValue, [in] UINT32 dummyParam1, [in] UINT32 dummyParam2, [out, retval] ParameterizedConstructorClass** parameterizedConstructorClass);
    }

    [uuid(5953772c-bcbd-4cf3-b495-5b04677fc779)]
    [contract(ReferenceContract, 1)]
    interface IParameterizedConstructorClass : IInspectable
    {
        [propget] HRESULT BaseTypeConstructorParam([out,retval] UINT32* intValue);

        [propget] HRESULT StringConstructorParam([out, retval] HSTRING* strValue);

        [propget] HRESULT RefTypeConstructorParam([out, retval] ISomeOtherType** refTypeValue);
    }

    [contract(ReferenceContract, 1)]
    // Indicates that the class has a default constructor
    [activatable(ReferenceContract, 1)]
    // Indicates that parameterized constructors are provided via the IParameterizedConstructorClassFactory
    [activatable(IParameterizedConstructorClassFactory, ReferenceContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass ParameterizedConstructorClass
    {
        [default] interface IParameterizedConstructorClass;
    }


    // StaticClass is projected as a purely static class with only static methods

    // Forward-declare StaticClass to allow specifying exclusiveto
    // for static factory
    runtimeclass StaticClass;

    [uuid(db7daa62-3130-45a5-826a-152c577336c1)]
    [contract(ReferenceContract, 1)]
    [exclusiveto(StaticClass)]
    interface IStaticClassStatics : IInspectable
    {
        HRESULT StaticMethodWithNoParameters();
        HRESULT StaticMethodWithParam([in] UINT32 intParam);
        HRESULT StaticMethodWithRetVal([out, retval] UINT32* intRetVal);
    }

    [contract(ReferenceContract, 1)]
    [static(IStaticClassStatics, ReferenceContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass StaticClass
    {
    }

    // ActivatableStaticClass is projected as a constructable (non-static) class with
    // static methods

    // Forward-declare ActivatableStaticClass to allow specifying exclusiveto
    // for static factory
    runtimeclass ActivatableStaticClass;

    [uuid(8b4df47f-1caf-44b6-9f85-678fe74e6c5e)]
    [contract(ReferenceContract, 1)]
    [exclusiveto(ActivatableStaticClass)]
    interface IActivatableStaticClassStatics : IInspectable
    {
        HRESULT StaticMethod([out, retval] UINT32* intRetVal);
    }

    [uuid(803f0506-7f74-4dc5-8e95-9551ae383b14)]
    [contract(ReferenceContract, 1)]
    interface IActivatableStaticClass : IInspectable
    {
        HRESULT NonStaticMethod([out, retval] UINT32* intRetVal);
    }

    [contract(ReferenceContract, 1)]
    [activatable(ReferenceContract, 1)]
    [static(IActivatableStaticClassStatics, ReferenceContract, 1)]
    [marshaling_behavior(agile)]
    [threading(both)]
    runtimeclass ActivatableStaticClass
    {
        [default] interface IActivatableStaticClass;
    }

    /* TODO:
    -Props
    -Activatable
    -Static
    -Collections
    -Async
    -Template project
    -Template .cpp/.h files (each type of class)
    -C++ WRL client
    */
}
